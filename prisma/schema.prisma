// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
   provider = "prisma-client-js"
}

datasource db {
   provider = "postgresql"
   url      = env("DATABASE_URL")
}

enum RoleEnum {
   ADMIN
   USER
}

enum CompanyExperienceTypeEnum {
   FREELANCER // Trabalho autônomo ou independente
   FULL_TIME // Trabalho em regime integral
   PART_TIME // Trabalho em regime parcial
   INTERNSHIP // Estágio
   TEMPORARY // Contrato temporário
   TRAINEE // Programa de trainee
   OUTSOURCED // Terceirizado
   VOLUNTEER // Trabalho voluntário
   CONTRACTOR // Contrato por projeto ou serviço
}

model User {
   id        String   @id @default(uuid())
   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
   isActive  Boolean  @default(true)

   name      String?
   email     String    @unique
   password  String
   role      RoleEnum  @default(USER)
   lastLogin DateTime?

   ProfessionalInfo ProfessionalInfo?
   CVs              Curriculum[]

   @@index([email])
}

model Curriculum {
   id        String   @id @default(uuid())
   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
   isActive  Boolean  @default(true)

   title          String
   jobDescription String?
   isPublic       Boolean @default(false)
   cvUrl          String?

   User   User   @relation(fields: [userId], references: [id])
   userId String
}

model ProfessionalInfo {
   id        String   @id @default(uuid())
   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
   isActive  Boolean  @default(true)

   Companies      CompanyExperience[] @relation("ProfessionalCompanies")
   Educations     Education[]         @relation("ProfessionalEducations")
   Skills         Skill[]             @relation("ProfessionalSkills")
   Certifications Certification[]     @relation("ProfessionalCertifications")

   User   User   @relation(fields: [userId], references: [id])
   userId String @unique
}

model CompanyExperience {
   id        String   @id @default(uuid())
   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
   isActive  Boolean  @default(true)

   name    String
   role    String
   type    CompanyExperienceTypeEnum
   startAt DateTime
   endAt   DateTime?

   ProfessionalInfo   ProfessionalInfo @relation("ProfessionalCompanies", fields: [professionalInfoId], references: [id])
   professionalInfoId String
}

model Education {
   id        String   @id @default(uuid())
   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
   isActive  Boolean  @default(true)

   institution String
   degree      String
   studyArea   String
   startAt     DateTime
   endAt       DateTime?

   ProfessionalInfo   ProfessionalInfo @relation("ProfessionalEducations", fields: [professionalInfoId], references: [id])
   professionalInfoId String
}

model Skill {
   id        String   @id @default(uuid())
   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
   isActive  Boolean  @default(true)

   name        String
   description String?

   ProfessionalInfo   ProfessionalInfo @relation("ProfessionalSkills", fields: [professionalInfoId], references: [id])
   professionalInfoId String
}

model Certification {
   id        String   @id @default(uuid())
   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
   isActive  Boolean  @default(true)

   name                String
   issuingOrganization String
   issueDate           DateTime
   expirationDate      DateTime?
   credentialId        String?
   credentialUrl       String?

   ProfessionalInfo   ProfessionalInfo @relation("ProfessionalCertifications", fields: [professionalInfoId], references: [id])
   professionalInfoId String
}
